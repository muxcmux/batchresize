#!/usr/bin/env ruby
require 'optparse'
require 'logger'

LOGGER = Logger.new($stdout)
LOGGER.formatter = proc do |severity, datetime, progname, msg|
  "##{Process.pid} #{severity}: #{msg}\n"
end

%w(rmagick xpool).each do |lib|
  begin
    require lib
  rescue LoadError
    LOGGER.fatal "#{lib} not found. Install with `gem install #{lib}`"
    exit
  end
end


options = {
  :target => nil,
  :destination => nil,
  :size => '1920x1440',
  :concurrency => 5,
  :quality => 80
}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: batchresize sourcedir destinationdir [options]"
  
  opts.on('-s', '--size [SIZE]', 'Required image size defaults to 960x720') do |size|
    options[:size] = size
  end
  
  opts.on('-q', '--quality [QUALITY]', Integer, 'Set the image quality from 1 to 100. Defaults to 80') do |quality|
    options[:quality] = quality
  end
  
  opts.on('-c', '--concurrency [WORKERS]', Integer, 'Number of images to process simultaneously. Defaults to 5') do |workers|
    options[:concurrency] = workers
  end
  
  opts.on('-m', '--mute', 'Silence output') do
    LOGGER.level = Logger::FATAL
  end
  
  opts.on('-h', '--help', 'Print this message') do
    puts opts
    exit
  end
end
optparse.parse!

begin
  options[:destination] = File.expand_path(Dir.new(ARGV.pop)) << '/'
  options[:target] = File.expand_path(Dir.new(ARGV.pop)) << '/'
rescue TypeError => e
  puts optparse
  exit(-1)
rescue Errno::ENOENT => e
  puts e.message
  puts optparse
  exit(-1)
end

if !options[:quality].between?(1, 100)
  puts "Invalid quality argument (must be an integer between 1 and 100"
  puts optparse
  exit(-1)
end

class Resizer
  def initialize target_dir, target_file, destination_dir, size, quality
    @quality = quality
    @target_dir = target_dir
    @target_file = target_file
    @destination_dir = destination_dir
    @filename = @target_file.split('/').last
    @relative_filename = @target_file.sub(@target_dir, '')
    @relative_dir = @relative_filename.sub(@filename, '')
    @size = size
    mksubdir
  end
  
  def run
    LOGGER.info "Started processing: #{@target_file}"
    img = Magick::Image.read(@target_file).first
    width, height = @size.split('x')
    @size = "#{height}x#{width}" if img.rows > img.columns
    filename = "#{@relative_dir}#{@size}_#{@filename}"
    destination = "#{@destination_dir}#{filename}"
    begin
      img.change_geometry!(@size) do |cols, rows, image|
        newimg = img.resize(cols, rows)
        q = @quality
        newimg.write(destination) do
          self.quality = q
        end
      end
    rescue Exception => e
      LOGGER.fatal "Failed to create #{destination}. Original message: #{e.message}"
    end
    LOGGER.info "Finished processing: #{@target_file.split('/').last}"
  end
  
  def mksubdir
    dir = "#{@destination_dir}#{@relative_dir}"
    if @relative_dir && !File.exists?(dir)
      begin
        LOGGER.info "Creating directory: #{dir}"
        Dir.mkdir(dir)
      rescue
        LOGGER.fatal "Couldn't create directory: #{dir}. Check permissions?"
      end
    end
  end
end

begin
  pool = XPool.new options[:concurrency]
  
  Dir.glob("#{options[:target]}**/*.{jpg,jpeg}", File::FNM_CASEFOLD) do |jpg|
    resizer = Resizer.new options[:target], jpg, options[:destination], options[:size], options[:quality]
    pool.schedule resizer
  end
ensure
  pool.shutdown
end

LOGGER.info "Processing done."